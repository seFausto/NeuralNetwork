import java.util.ArrayList;
import java.util.Random;

public class NeuralNetwork {

	public static void main(String[] args) {

		ArrayList<Integer> topology = new ArrayList<Integer>();
		// 3 inputs, 1 output
		topology.add(2);
		topology.add(2);
		topology.add(1);

		Net myNet = new Net(topology);

		for (int i = 0; i < 1000; i++) {

			double input =( (double)i/100) * 5;
			ArrayList<Double> inputVals = new ArrayList<>();
			inputVals.add((double) input/100);
			myNet.FeedForward(inputVals);

			ArrayList<Double> targetVals = new ArrayList<>();
			targetVals.add((double) input + .01);
			myNet.BackPropagation(targetVals);

			ArrayList<Double> returnVals = myNet.GetResults();

			for (int j = 0; j < inputVals.size(); j++) {
				System.out.println("input: " + inputVals.get(j) + " | output: "
						+ returnVals.get(j));
			}

		}

		ArrayList<Double> inputVals = new ArrayList<>();
		inputVals.add((double) 0);
		inputVals.add((double) 0);
		myNet.FeedForward(inputVals);

		ArrayList<Double> returnVals = new ArrayList<>();
		returnVals = myNet.GetResults();

		for (Double double1 : returnVals) {
			System.out.println(double1);
		}

	}
	
	
	private void GetValues()
{
		double[][] values = new double[100][1];
}
}
